import openai
from typing import Dict
import re
import os

class LanguageHandler:
    def __init__(self):
        # Use AsyncOpenAI for async operations
        self.openai_client = openai.AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.supported_languages = ['en', 'ar']
        self.default_language = 'ar'

    def detect_language(self, text: str) -> str:
        """Detect the language of the input text using regex patterns."""
        try:
            # Arabic Unicode ranges
            arabic_pattern = re.compile(r'[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]+')
            
            # Count Arabic characters
            arabic_chars = len(arabic_pattern.findall(text))
            
            # Count English characters
            english_pattern = re.compile(r'[a-zA-Z]+')
            english_chars = len(english_pattern.findall(text))
            
            # If more Arabic characters or equal, consider it Arabic
            if arabic_chars >= english_chars:
                return 'ar'
            return 'en'
            
        except Exception as e:
            print(f"Error detecting language: {str(e)}")
            return self.default_language

    def get_default_responses(self, language: str) -> Dict[str, str]:
        """Get default responses in the specified language."""
        responses = {
            'ar': {
                'COMPLAINT': 'ุดูุฑุงู ูุชูุงุตูู ูุนูุง ุจุฎุตูุต ูุฐู ุงูุดููู. ูุญู ููุฏุฑ ููุงุญุธุงุชู ููุฃุฎุฐูุง ุนูู ูุญูู ุงูุฌุฏ. ุณูุชู ุชูุฌูู ุดููุงู ุฅูู ุงููุฑูู ุงููุฎุชุต ูููุฑุงุฌุนุฉ ูุงููุชุงุจุนุฉ ูุนู ูู ุฃูุฑุจ ููุช.',
                'SUGGESTION': 'ุดูุฑุงู ูู ุนูู ูุฐุง ุงูุงูุชุฑุงุญ ุงูููู! ูุญู ููุฏุฑ ุขุฑุงุก ุนููุงุฆูุง ููุณุนู ุฏุงุฆูุงู ููุชุญุณูู. ุณูุชู ูุฑุงุฌุนุฉ ุงูุชุฑุงุญู ูู ูุจู ุงููุฑูู ุงููุฎุชุต.',
                'GREETING': 'ูุนูููู ุงูุณูุงู ูุฑุญูุฉ ุงููู ูุจุฑูุงุชูุ ุฃููุงู ูุณููุงู ุจู! ๐\n\nุฃูุง ูุณุงุนุฏู ุงูุฐูู ูู ุดุฑูุฉ ุฃุจุงุฑ ูุชูุตูู ุงูููุงู ูู ุงูุณุนูุฏูุฉ. ูููููู ูุณุงุนุฏุชู ูู:\n\n๐ง ุทูุจ ุชูุตูู ุงูููุงู\n๐๏ธ ูุนุฑูุฉ ุงููุฏู ุงููุชุงุญุฉ\n๐ท๏ธ ุงูุงุณุชูุณุงุฑ ุนู ุงูุนูุงูุงุช ุงูุชุฌุงุฑูุฉ ูุงูุฃุณุนุงุฑ\n๐ ุชูุฏูู ุงูุดูุงูู ูุงูุงูุชุฑุงุญุงุช\n\nููู ูููููู ูุณุงุนุฏุชู ุงููููุ',
                'THANKING': 'ุนููุงู! ๐',
                'UNKNOWN': 'ุนุฐุฑุงูุ ูู ุฃุชููู ูู ููู ุทูุจู. ููููู ุฅุนุงุฏุฉ ุตูุงุบุฉ ุงูุณุคุงู ุฃู ุงูุชูุงุตู ูุน ูุฑูู ุงูุฏุนู.',
                'TEMPLATE_REPLY': 'ุชู ุงุณุชูุงู ุฑุฏู ุนูู ุงูุฑุณุงูุฉ. ุดูุฑุงู ูู.',
                'OTHERS': 'ูุฑุญุจุงู! ุดูุฑุงู ูุชูุงุตูู ูุนูุง. ููู ูููู ูุณุงุนุฏู ุงููููุ',
                'CITY_FIRST': 'ุงูุฑุฌุงุก ุงุฎุชูุงุฑ ุงููุฏููุฉ ุงูู.',
                'BRAND_FIRST': 'ุงูุฑุฌุงุก ุงุฎุชูุงุฑ ุงููุงุฑูุฉ ุงูู.',
                'NO_ORDERS': 'ูุง ุนูุฏู ุงู ุทูุจุงุช ุญุงููุงู.',
                'TEAM_WILL_REPLY': 'ุดูุฑุงู ูุชูุงุตูู ูุนูุง! ุชู ุงุณุชูุงู ุฑุณุงูุชู ูุณูุชูุงุตู ูุนู ุฃุญุฏ ุฃุนุถุงุก ูุฑูููุง ูุฑูุจุงู.',
                'INQUIRY_TEAM_REPLY': 'ุดูุฑุงู ูุงุณุชูุณุงุฑู! ุณูุชูุงุตู ูุนู ูุฑูู ุงููุจูุนุงุช ููุฅุฌุงุจุฉ ุนูู ุฃุณุฆูุชู ูุชูุฏูู ุงููุณุงุนุฏุฉ.',
                'SERVICE_REQUEST_TEAM_REPLY': 'ุชู ุงุณุชูุงู ุทูุจู! ุณูุชูุงุตู ูุนู ูุฑูู ุฎุฏูุฉ ุงูุนููุงุก ููุนุงูุฌุฉ ุทูุจู ูู ุฃูุฑุจ ููุช.',
                'ORDER_SUCCESS': """
                ููุชุงุฒ! ุชู ุงูุดุงุก ุทูุจู ุจูุฌุงุญ.
                ุฑูู ุงูุทูุจ: {order_id}
                ููุช ุงูุชูุตูู ุงููุชููุน: {delivery_time}
                ุงููุจูุบ ุงูุงุฌูุงูู: {total_amount}
                
                ุชูุฏุฑ ุชุชุงุจุน ุญุงูุฉ ุทูุจู ูู ุงู ููุช ุนู ุทุฑูู ุงูุณุคุงู ุนู ุทูุจุงุชู.
                """,
                'ORDER_ERROR': 'ุนุฐุฑุงูุ ุตุงุฑ ุฎุทุฃ ุงุซูุงุก ุงูุดุงุก ุทูุจู. ุญุงูู ูุฑุฉ ุซุงููุฉ.',
                'MISSING_INFO': 'ูุญุชุงุฌ ุงููุนูููุงุช ุงูุชุงููุฉ ูุฅููุงู ุทูุจู: {fields}'
            },
            'en': {
                'COMPLAINT': 'Thank you for contacting us regarding this complaint. We appreciate your feedback and take it seriously. Your complaint will be forwarded to the relevant team for review and follow-up.',
                'SUGGESTION': 'Thank you for this valuable suggestion! We appreciate our customers\' feedback and always strive for improvement. Your suggestion will be reviewed by the relevant team.',
                'GREETING': 'Hello and welcome! ๐\n\nI am your smart assistant at Abar Water Delivery Company in Saudi Arabia. I can help you with:\n\n๐ง Water delivery orders\n๐๏ธ Available cities information\n๐ท๏ธ Brands and pricing inquiries\n๐ Complaints and suggestions\n\nHow can I help you today?',
                'THANKING': 'You\'re welcome! ๐',
                'UNKNOWN': 'Sorry, I could not understand your request. Please rephrase your question or contact our support team.',
                'TEMPLATE_REPLY': 'Your reply to the message has been received. Thank you.',
                'OTHERS': 'Hello! Thank you for contacting us. How can we help you today?',
                'CITY_FIRST': "Please select a city first.",
                'BRAND_FIRST': "Please select a brand first.",
                'NO_ORDERS': "You don't have any orders yet.",
                'TEAM_WILL_REPLY': 'Thank you for contacting us! We have received your message and one of our team members will contact you soon.',
                'INQUIRY_TEAM_REPLY': 'Thank you for your inquiry! Our sales team will contact you to answer your questions and provide assistance.',
                'SERVICE_REQUEST_TEAM_REPLY': 'Your request has been received! Our customer service team will contact you to process your request as soon as possible.',
                'ORDER_SUCCESS': """
                Great! Your order has been created successfully.
                Order ID: {order_id}
                Estimated delivery time: {delivery_time}
                Total amount: {total_amount}
                
                You can check your order status anytime by asking about your orders.
                """,
                'ORDER_ERROR': "Sorry, there was an error creating your order. Please try again.",
                'MISSING_INFO': "We need the following information to complete your order: {fields}"
            }
        }
        return responses.get(language, responses['ar'])

    async def process_with_openai(self, prompt: str, system_prompt: str = None) -> str:
        """Process text with OpenAI using Saudi Arabic context."""
        try:
            messages = []
            
            # Enhanced system prompt to ensure natural responses
            if not system_prompt:
                system_prompt = """ุฃูุช ููุธู ุฎุฏูุฉ ุนููุงุก ูู ุดุฑูุฉ ุฃุจุงุฑ ูุชูุตูู ุงูููุงู ูู ุงูุณุนูุฏูุฉ.

ููุงุนุฏ ูููุฉ:
- ุฑุฏ ุจุทุฑููุฉ ุทุจูุนูุฉ ุชูุงูุงู ูุซู ุฃู ููุธู ุญูููู
- ูุง ุชุณุชุฎุฏู ุฃุจุฏุงู ุนุจุงุฑุงุช ูุซู "ุฑุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู:" ุฃู "ุฑุฏ ุงููุณุงุนุฏ:" ุฃู "ุฃูุง ุฐูุงุก ุงุตุทูุงุนู"
- ุงุจุฏุฃ ุงูุฑุฏ ูุจุงุดุฑุฉ ุจุงููุญุชูู
- ูู ูุฏูุฏ ูุทุจูุนู ููููุฏ"""
            
            messages.append({"role": "system", "content": system_prompt})
            messages.append({"role": "user", "content": prompt})

            response = await self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=messages,
                temperature=0.7
            )
            
            # Check if response and content exist before calling strip()
            if response and response.choices and len(response.choices) > 0:
                content = response.choices[0].message.content
                if content:
                    # Clean any potential robotic prefixes
                    cleaned_content = content.strip()
                    
                    # Remove common robotic prefixes if they appear
                    prefixes_to_remove = [
                        "ุฑุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู:",
                        "ุฑุฏ ุงููุณุงุนุฏ:",
                        "ุงูุฐูุงุก ุงูุงุตุทูุงุนู:",
                        "ุงููุณุงุนุฏ:",
                        "AI response:",
                        "Assistant:"
                    ]
                    
                    for prefix in prefixes_to_remove:
                        if cleaned_content.startswith(prefix):
                            cleaned_content = cleaned_content[len(prefix):].strip()
                            break
                    
                    return cleaned_content
            
            print("OpenAI response was empty or invalid")
            return None
            
        except Exception as e:
            print(f"Error processing with OpenAI: {str(e)}")
            return None

    async def translate_to_arabic(self, text: str) -> str:
        """Translate English text to Saudi Arabic."""
        system_prompt = """
        ุฃูุช ูุชุฑุฌู ูุญุชุฑู ูุชุฎุตุต ูู ุงูุชุฑุฌูุฉ ุฅูู ุงูููุฌุฉ ุงูุณุนูุฏูุฉ.
        ูุฌุจ ุฃู ุชููู ุงูุชุฑุฌูุฉ:
        1. ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุงูุฏุงุฑุฌุฉ
        2. ููุงุณุจุฉ ูููุญุงุฏุซุงุช ุงูููููุฉ
        3. ุชุญุงูุธ ุนูู ุงููุนูู ุงูุฃุตูู
        4. ุชุณุชุฎุฏู ุงูุชุนุงุจูุฑ ุงูุณุนูุฏูุฉ ุงููุฃูููุฉ
        """
        
        return await self.process_with_openai(
            f"ุชุฑุฌู ุงููุต ุงูุชุงูู ุฅูู ุงูููุฌุฉ ุงูุณุนูุฏูุฉ:\n{text}",
            system_prompt
        )

    async def translate_response(self, text: str, target_language: str) -> str:
        """Translate response to target language."""
        if target_language == 'ar':
            return await self.translate_to_arabic(text)
        elif target_language == 'en':
            # If target is English, assume text is Arabic and translate to English
            system_prompt = """
            You are a professional translator specializing in translating Saudi Arabic dialect to English.
            The translation should be:
            1. Natural and fluent English
            2. Suitable for everyday conversations
            3. Maintain the original meaning
            4. Use appropriate English expressions
            """
            
            return await self.process_with_openai(
                f"Translate the following Saudi Arabic text to English:\n{text}",
                system_prompt
            )
        else:
            # Return original text if language not supported
            return text

language_handler = LanguageHandler() 